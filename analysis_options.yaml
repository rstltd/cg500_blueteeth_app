# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Code style and organization  
    prefer_single_quotes: true
    # sort_constructors_first: true  # Disabled: too many changes needed
    # sort_unnamed_constructors_first: true
    
    # Performance and memory
    avoid_multiple_declarations_per_line: true
    unnecessary_statements: true
    
    # Documentation and comments
    package_api_docs: false  # Disabled for private app
    public_member_api_docs: false
    
    # Error prevention
    avoid_catching_errors: true
    use_build_context_synchronously: true
    
    # Flutter specific
    avoid_unnecessary_containers: true
    sized_box_for_whitespace: true
    use_colored_box: true
    # use_decorated_box: true  # Disabled: would require many UI changes

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
